{
	TemplateFormatVersion":"2010-09-09",
    	"Description":"VPC, Security Group, CentOS 7 Instance",
    	"Metadata":{
        	"CentosAMIVersion":"1602, released 02/26/2016",
        	"CentosURL":"https://wiki.centos.org/Cloud/AWS",
		"AMIURL": "https://aws.amazon.com/marketplace/pp/B00O7WM7QW"
    	},
    	"Parameters":{
        		"SSHKeyName":{
            		"Description":"SSH Key Name",
            		"Type":"String"
        	}
    	},
    	"Mappings":{
        	"RegionMap":{
            		"us-east-1":{
                		"CentOS7x8664withUpdatesHVM":"ami-6d1c2007"
            		},
            		"us-west-2":{
                		"CentOS7x8664withUpdatesHVM":"ami-d2c924b2"
            		},
            		"us-west-1":{
                		"CentOS7x8664withUpdatesHVM":"ami-af4333cf"
            		},
            "eu-central-1":{
                "CentOS7x8664withUpdatesHVM":"ami-9bf712f4"
            },
            "eu-west-1":{
                "CentOS7x8664withUpdatesHVM":"ami-7abd0209"
            },
            "ap-southeast-1":{
                "CentOS7x8664withUpdatesHVM":"ami-f068a193"
            },
            "ap-southeast-2":{
                "CentOS7x8664withUpdatesHVM":"ami-fedafc9d"
            },
            "ap-northeast-1":{
                "CentOS7x8664withUpdatesHVM":"ami-eec1c380"
            },
            "ap-northeast-2":{
                "CentOS7x8664withUpdatesHVM":"ami-c74789a9"
            },
            "sa-east-1":{
                "CentOS7x8664withUpdatesHVM":"ami-26b93b4a"
            }
        }
    },
    "Resources":{
	"VPC" : {
      		"Type" : "AWS::EC2::VPC",
      		"Properties" : {
        		"CidrBlock" : "10.0.0.0/16",
        		"Tags" : [ {"Key" : "Application", "Value" : { "Ref" : "AWS::StackId"} } ]
      		}
    	},

    	"PublicSubnet" : {
      		"Type" : "AWS::EC2::Subnet",
      		"Properties" : {
        		"VpcId" : { "Ref" : "VPC" },
        		"CidrBlock" : "10.0.2.0/24",
        		"Tags" : [ 
				{"Key" : "Application", "Value" : { "Ref" : "AWS::StackId"}},
				{"Key: "SubnetId":, "Value": "public"}
			]
      		}
    	},

	"PrivateProdSubnet": {
		"Type" : "AWS::EC2::Subnet",
      		"Properties" : {
        		"VpcId" : { "Ref" : "VPC" },
        		"CidrBlock" : "10.0.3.0/24",
        		"Tags" : [ {"Key" : "Application", "Value" : { "Ref" : "AWS::StackId"} }, 
				{"Key: "SubnetId":, "Value": "prod"} 
			]
      		}

	},	

	"LabSubnet": {
                "Type" : "AWS::EC2::Subnet",
                "Properties" : {
                        "VpcId" : { "Ref" : "VPC" },
                        "CidrBlock" : "10.0.4.0/24",
                        "Tags" : [ {"Key" : "Application", "Value" : { "Ref" : "AWS::StackId"} },
                                {"Key: "SubnetId":, "Value": "lab"}
                        ]
                }

        },     


    "InternetGateway" : {
      "Type" : "AWS::EC2::InternetGateway",
      "Properties" : {
        "Tags" : [ {"Key" : "Application", "Value" : { "Ref" : "AWS::StackId"} } ]
      }
    },

    "AttachGateway" : {
       "Type" : "AWS::EC2::VPCGatewayAttachment",
       "Properties" : {
         "VpcId" : { "Ref" : "VPC" },
         "InternetGatewayId" : { "Ref" : "InternetGateway" }
       }
    },

    "RouteTable" : {
      "Type" : "AWS::EC2::RouteTable",
      "Properties" : {
        "VpcId" : {"Ref" : "VPC"},
        "Tags" : [ {"Key" : "Application", "Value" : { "Ref" : "AWS::StackId"} } ]
      }
    },

    "Route" : {
      "Type" : "AWS::EC2::Route",
      "DependsOn" : "AttachGateway",
      "Properties" : {
        "RouteTableId" : { "Ref" : "RouteTable" },
        "DestinationCidrBlock" : "0.0.0.0/0",
        "GatewayId" : { "Ref" : "InternetGateway" }
      }
    },

    "SubnetRouteTableAssociation" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "Subnet" },
        "RouteTableId" : { "Ref" : "RouteTable" }
      }
    },

    "NetworkAcl" : {
      "Type" : "AWS::EC2::NetworkAcl",
      "Properties" : {
        "VpcId" : {"Ref" : "VPC"},
        "Tags" : [ {"Key" : "Application", "Value" : { "Ref" : "AWS::StackId"} } ]
      }
    },

    "InboundHTTPNetworkAclEntry" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "Properties" : {
        "NetworkAclId" : {"Ref" : "NetworkAcl"},
        "RuleNumber" : "100",
        "Protocol" : "6",
        "RuleAction" : "allow",
        "Egress" : "false",
        "CidrBlock" : "0.0.0.0/0",
        "PortRange" : {"From" : "80", "To" : "80"}
      }
    },

    "InboundSSHNetworkAclEntry" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "Properties" : {
        "NetworkAclId" : {"Ref" : "NetworkAcl"},
        "RuleNumber" : "101",
        "Protocol" : "6",
        "RuleAction" : "allow",
        "Egress" : "false",
        "CidrBlock" : "0.0.0.0/0",
        "PortRange" : {"From" : "22", "To" : "22"}
      }
    },

    "InboundResponsePortsNetworkAclEntry" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "Properties" : {
        "NetworkAclId" : {"Ref" : "NetworkAcl"},
        "RuleNumber" : "102",
        "Protocol" : "6",
        "RuleAction" : "allow",
        "Egress" : "false",
        "CidrBlock" : "0.0.0.0/0",
        "PortRange" : {"From" : "1024", "To" : "65535"}
      }
    },

    "OutBoundHTTPNetworkAclEntry" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "Properties" : {
        "NetworkAclId" : {"Ref" : "NetworkAcl"},
        "RuleNumber" : "100",
        "Protocol" : "6",
        "RuleAction" : "allow",
        "Egress" : "true",
        "CidrBlock" : "0.0.0.0/0",
        "PortRange" : {"From" : "80", "To" : "80"}
      }
    },

    "OutBoundHTTPSNetworkAclEntry" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "Properties" : {
        "NetworkAclId" : {"Ref" : "NetworkAcl"},
        "RuleNumber" : "101",
        "Protocol" : "6",
        "RuleAction" : "allow",
        "Egress" : "true",
        "CidrBlock" : "0.0.0.0/0",
        "PortRange" : {"From" : "443", "To" : "443"}
      }
    },

    "OutBoundResponsePortsNetworkAclEntry" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "Properties" : {
        "NetworkAclId" : {"Ref" : "NetworkAcl"},
        "RuleNumber" : "102",
        "Protocol" : "6",
        "RuleAction" : "allow",
        "Egress" : "true",
        "CidrBlock" : "0.0.0.0/0",
        "PortRange" : {"From" : "1024", "To" : "65535"}
      }
    },

    "SubnetNetworkAclAssociation" : {
      "Type" : "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "Subnet" },
        "NetworkAclId" : { "Ref" : "NetworkAcl" }
      }
    },

    "IPAddress" : {
      "Type" : "AWS::EC2::EIP",
      "DependsOn" : "AttachGateway",
      "Properties" : {
        "Domain" : "vpc",
        "InstanceId" : { "Ref" : "WebServerInstance" }
      }
    },

    "InstanceSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "VpcId" : { "Ref" : "VPC" },
        "GroupDescription" : "Enable SSH access via port 22",
        "SecurityGroupIngress" : [
          {"IpProtocol" : "tcp", "FromPort" : "22", "ToPort" : "22", "CidrIp" : { "Ref" : "SSHLocation"}},
          { "IpProtocol" : "tcp", "FromPort" : "80", "ToPort" : "80", "CidrIp" : "0.0.0.0/0"}
         ]
      }
    },

        "SecurityGroup":{
            "Type":"AWS::EC2::SecurityGroup",
            "Properties":{
                "GroupDescription":"Security Group",
                "SecurityGroupIngress":[
                    {
                        "FromPort":"22",
                        "IpProtocol":"tcp",
                        "CidrIp":"0.0.0.0/0",
                        "ToPort":"22"
                    }
                ]
            }
        },
        "Instance":{
            "Type":"AWS::EC2::Instance",
            "Metadata":{
                "UserDataComment1":"The cloud-config script is delivered directly in user_data because the CentOS 7 base AMIs run cloud-init automatically, looking for a cloud-init config in user_data",
                "UserDataComment2":"In this example the 'dmidecode' command is run and the output is sent back to the WaitConditionHandle which is then passed out through the CloudFormation outputs",
                "ImageIdComment":"The AMIs in the RegionMap are AMIs published by Centos.org. They can be found here : https://aws.amazon.com/marketplace/pp/B00O7WM7QW"
            },
            "Properties":{
                "ImageId":{
                    "Fn::FindInMap":[
                        "RegionMap",
                        {
                            "Ref":"AWS::Region"
                        },
                        "CentOS7x8664withUpdatesHVM"
                    ]
                },
                "InstanceType":"t2.micro",
                "KeyName":{
                    "Ref":"SSHKeyName"
                },
                "SecurityGroups":[
                    {
                        "Ref":"SecurityGroup"
                    }
                ],
                "UserData":{
                    "Fn::Base64":{
                        "Fn::Join":[
                            "",
                            [
                                "#cloud-config\n",
                                "\n",
                                "runcmd:\n",
                                " - for i in {1..3}; do /usr/bin/easy_install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz 2>&1 >> /var/log/initial_user-data.log && break || sleep 10; done\n",
                                " - dmidecode 2>&1 >> /tmp/custom-output.txt",
                                " - CFNSTATUS=$?\n",
                                " - /usr/bin/cfn-signal ",
                                "         --exit-code $CFNSTATUS ",
                                "         --data \"$( base64 -w 0 /tmp/custom-output.txt )\" ",
                                "'",
                                {
                                    "Ref":"WaitConditionHandle"
                                },
                                "'",
                                " 2>&1 >> /var/log/initial_user-data.log\n"
                            ]
                        ]
                    }
                }
            }
        },
        "WaitConditionHandle":{
            "Type":"AWS::CloudFormation::WaitConditionHandle"
        },
        "WaitCondition":{
            "Type":"AWS::CloudFormation::WaitCondition",
            "DependsOn":"Instance",
            "Properties":{
                "Handle":{
                    "Ref":"WaitConditionHandle"
                },
                "Timeout":"300"
            }
        }
    },
    "Outputs":{
        "CloudInitOutput":{
            "Description":"The data returned to the WaitConditionHandle from Cloud Init",
            "Value":{
                "Fn::GetAtt":[
                    "WaitCondition",
                    "Data"
                ]
            }
        }
    }
}
